alias stow='stow --ignore \.git'
alias n='nvim'
alias n='nvim --listen /tmp/nvim-server.pipe'
alias nv='neovide'
alias v='vim'
alias hx='helix'
alias rm='trash-put'
alias myip="curl http://ipecho.net/plain; echo"
alias t="tgpt -q"
alias ts="tgpt -qs" # shell
alias tm="tgpt -m" # multiline
alias tc="tgpt -qc" # code
alias ti="tgpt --image"
function cdj() { curl -s https://icanhazdadjoke.com/ }
function cbb() { curl -s https://api.breakingbadquotes.xyz/v1/quotes | jq -r '.[] | "\"\(.quote)\" -- \(.author)"' }
function fal() { rg -e "^\s*alias" ~/i3df/.zshrc.alias | fzf }

alias ..="cd .."
alias ...="cd ../.."

function p() { cd "$HOME/projects/$1" }
alias px="pkill xdotool"

alias kre="localectl set-x11-keymap us; setxkbmap -option caps:swapescape"

function g() { git $@ }
alias doo='~/i3df/scripts/doing.sh'
alias ffo='fc-list | fzf'
alias fps='ps aux | fzf' # Search through running processes
alias gb='git branch | fzf | xargs git checkout' # Git-specific fuzzy commands
alias gl='git log --oneline | fzf --preview "git show --color=always {1}"'
alias fk='ps aux | fzf | awk "{print \$2}" | xargs kill -9' # Kill process interactively
alias cdi='cd $(find . -type d | fzf)' # Search and cd into subdirectories

alias fQ='yay -Q | fzf'

alias feh='feh --scale-down'
alias yt='$SCRIPT_DIR/yt.sh'
alias ytvc='yt-dlp --write-subs -P "$HOME/videos/" "$(xsel -b -o 2>/dev/null)"'
alias ytmc='yt-dlp --write-subs --extract-audio --audio-quality 0 --embed-thumbnail -P "$HOME/music/" "$(xsel -b -o 2>/dev/null)"'
alias ytv='yt-dlp -P "$HOME/videos/" '
alias ytm='yt-dlp --extract-audio --audio-quality 0 --embed-thumbnail '
alias ll='eza --icons --color=auto --git -alh'
alias l='eza --icons --color=auto -h'
alias od="ouch decompress"
alias oc="ouch   compress"
# alias So='source ~/.zshrc'
alias So='exec zsh'
alias grep='grep --color=auto'

alias cona='nvim ~/i3df/.zshrc.alias'
alias conb='nvim ~/i3df/.bashrc'
alias cond='cd ~/i3df/.config/dunst; nvim dunstrc'
alias cone='cd ~/.config/doom/; nvim .'
alias coni='cd ~/i3df/.config/i3/; nvim config'
alias cons='cd ~/.config/sway/; nvim config'
alias conib='cd ~/i3df/.config/i3blocks/; nvim config'
alias const='nvim ~/i3df/.config/i3blocks/config'
alias conm='nvim ~/.config/mimeapps.list'
alias conn='cd ~/i3df/.config/nvim/lua/plugins/; yazi'
alias conq='cd ~/.config/qutebrowser; yazi .'
alias conw='nvim ~/i3df/.config/wezterm/wezterm.lua'
alias con.='yazi ~/.config/'
alias cony='cd ~/.config/yazi/; nvim .'
alias conz='nvim ~/i3df/.zshrc'

alias N='cd ~/notes; y'
alias Nha='nvim ~/notes/hobby/anime/'
alias Nc='nvim ~/notes/code/'

alias nnp='nvim --cmd "let g:pluginless = 1"'
alias b='btop'
alias py='python'
alias py3='python3'
alias pya='source env/bin/activate'
alias pyi='pip install -r requirements.txt'
alias pyenv='python3 -m venv;'
alias pyenvi='python3 -m venv env; pya; pyi;'
alias Sp='sudo pacman -S'
alias ys='yay -S'
alias lg='lazygit'
alias gi3='cd ~/i3df/; lazygit;'
alias setclip='xsel -b'
alias getclip='xsel -b -o'
alias sc='xsel -b'
alias gc='xsel -b -o'
alias scl='echo "!!" | sc' # copy last command
alias retroarch='(retroarch &)'
alias DR='pkill dunst; ( dunst & ); sleep 1; notify-send -u low 'low"; notify-send -u normal "normal"; notify-send -u critical "critical";" 

alias RB='cd ~/FUTSALA/; source env/bin/activate; uvicorn backend.main:app --reload'
alias RF='cd ~/FUTSALA/frontend; npm run dev'
alias RC='cd ~/FUTSALA; nvim .'
alias hql='harlequin'
alias xrr='xrandr --output HDMI-1 --right-of eDP-1'
alias xrl='xrandr --output eDP-1 --primary --mode 1366x768 --pos 1366x0 --rotate normal --output HDMI-1 --mode 1366x768 --pos 0x0 --rotate normal'
alias xr0='xrandr -s 0'
alias xreo='xrandr --output eDP-1 --off --output HDMI-1 --mode 1366x768 --pos 0x0 --rotate normal'
alias xrm='xrandr --setmonitor HDMI-1~1 768/205x683/230+1366+0 HDMI-1; xrandr --setmonitor HDMI-1~2 768/205x683/230+1366+683 none'
alias xrq='xrandr --setmonitor eDP-1~1 416/416x768/683+0+0 eDP-1; xrandr --setmonitor eDP-1~2 950/950x768/683+416+0 none'
alias xr/='xrandr --setmonitor eDP-1~1 950/416x768/683+0+0 eDP-1; xrandr --setmonitor eDP-1~2 416/1366x768/683+950+0 none'
alias xro='xrandr --output HDMI-1 --mode 1366x768 --pos 1366x0 --rotate right'
alias xrd='xrandr --delmonitor HDMI-1~1; xrandr --delmonitor HDMI-1~2; xrandr --delmonitor eDP-1~1; xrandr --delmonitor eDP-1~2'
alias xr='xrd; xrm'


function mkcd () { mkdir -p -- "$1" && cd -P -- "$1" }
function mvcd() { mv "$@" && cd "${@: -1}" }
function mvn() { mv "$@" && nvim "${@: -1}" }
function fman() {
    man -k . | fzf -q "$1" --prompt='man> '  --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man | col -bx | bat -l man -p --color always' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | xargs -r man
  }


# absolutely game changer bindings 
function displayFZFFiles { echo $(fzf --multi --preview 'bat --color=always --style=header,grid --line-range :400 {}') }

function ff {
  selection=$(displayFZFFiles);
  if [ -z "$selection" ]; then
    return;
  else
    echo "$selection" | xargs -r nvim
  fi;
}

# Function to open nvim at specific line using fzf with bat preview
function fw() {
  local selected=$(rg --line-number \
    --no-heading \
    --color=always \
    --smart-case \
    . 2> /dev/null |
    fzf --delimiter ':' \
    --ansi \
    --prompt 'rg> ' \
    --preview 'bat --style=numbers --color=always --highlight-line {2} {1}' \
    --preview-window 'down,45%,+{2}+3/3,~3')

  if [[ -n "$selected" ]]; then
    local file="${${(s/:/)selected}[1]}"
    local line="${${(s/:/)selected}[2]}"
    nvim "$file" "+$line"
  fi
}
function fwa() {
  local selected=$(rga --line-number \
    --no-heading \
    --color=always \
    --smart-case \
    . 2> /dev/null |
    fzf --delimiter ':' \
    --ansi \
    --prompt 'rga> ' \
    --preview 'bat --style=numbers --color=always --highlight-line {2} {1}' \
    --preview-window 'down,45%,+{2}+3/3,~3')

  if [[ -n "$selected" ]]; then
    local file="${${(s/:/)selected}[1]}"
    local line="${${(s/:/)selected}[2]}"
    nvim "$file" "+$line"
  fi
}

# unzips into folder
function smart_unzip() { 
  for zip_file in "$@"; do
    if [[ -f "$zip_file" ]]; then
      folder_name=$(basename "$zip_file" .zip)
      mkdir -p "$folder_name"
      unzip "$zip_file" -d "$folder_name"
      echo "Unzipped '$zip_file' into '$folder_name'"
    else
      echo "File '$zip_file' not found"
    fi
  done
}
alias suz='smart_unzip'

function find_git_root() {
    local dir=$(pwd)

    # Traverse upwards
    while [[ "$dir" != "$HOME" ]]; do
        if [[ -d "$dir/.git" ]]; then
            echo "$dir"
            return 0
        fi
        dir=$(dirname "$dir")  # Move one directory up
    done

    # If we reached HOME without finding .git, exit
    return 1
}
alias fgr='$(find_git_root)'
alias tree='eza --git --ignore-glob=.git --tree -al '
alias gittree='eza --git --tree --git-ignore -al "$(find_git_root || echo /dev/null)"'

function rm-restore() {
  # List trashed files with trash-cli and pipe to fzf for interactive selection
  selected_file=$(trash-list | fzf --preview 'echo {}' --preview-window=down:3)

  # Check if any file was selected
  if [ -z "$selected_file" ]; then
    echo "No file selected. Exiting."
    exit 0
  fi

  # Restore the selected file
  trash-restore <<< "$selected_file"

  echo "File restored: $selected_file"
}

function fo(){
    [[ -f /tmp/oldfiles.txt ]] && \rm /tmp/oldfiles.txt
    nvim -c 'redir >> /tmp/oldfiles.txt | silent oldfiles | redir end | q'

    local fname

    FILES=()
    for i in $(awk '!/man:/ {print $2}' /tmp/oldfiles.txt); do
        [[ -f $i ]] && FILES+=($i)
    done

    fname=$(printf "%s\n" "${FILES[@]}" | awk '!a[$0]++' | fzf) || return

    nvim "$fname"
}

function fzf-zeal() {
    local docset
    docset=$(ls ~/.local/share/Zeal/Zeal/docsets/ | sed 's/\.xml$//' | fzf)
    [ -n "$docset" ] && zeal "$docset"
}
